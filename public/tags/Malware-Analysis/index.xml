<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Malware Analysis on </title>
    <link>https://ruysal.com/tags/Malware-Analysis/</link>
    <description>Recent content in Malware Analysis on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Mar 2022 15:48:37 +0100</lastBuildDate><atom:link href="https://ruysal.com/tags/Malware-Analysis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Windows Dead Box (Disk Image) Forensics</title>
      <link>https://ruysal.com/post/2022-03-11-Windows-Forensics/</link>
      <pubDate>Fri, 11 Mar 2022 15:48:37 +0100</pubDate>
      
      <guid>https://ruysal.com/post/2022-03-11-Windows-Forensics/</guid>
      <description>TL;DR: In case you are responding to an active incident:
There is simply A LOT to analyze in terms of forensic artifacts on Windows systems. The process can take a long time, and slow down the IR process. Below are some of the artifacts that tends to yield quick results.
Make sure to switch to offline disk analysis on these tools and point them to the right disk!
WinLogOnView: Which account was logged into?</description>
    </item>
    
    <item>
      <title>Reverse Engineering: Malware Analysis of Ursnif</title>
      <link>https://ruysal.com/post/2020-11-26-Analysis-of-Ursnif-Malware/</link>
      <pubDate>Thu, 26 Nov 2020 19:15:02 +0000</pubDate>
      
      <guid>https://ruysal.com/post/2020-11-26-Analysis-of-Ursnif-Malware/</guid>
      <description>In this post, I will document my analysis of a malware sample from the Ursnif family. The analysis is only concerned with dissecting the DLL sample, and not the Delivery, and Weaponization procedures.
Ursnif employs quite a few tricks to make the analysis more challenging and hide itself from intruding eyes, such as:
Dynamically importing functions from libraries Storing things encrypted Process Injection Corrupted PE headers Using .rdata to store encrypted payloads encrypted C2 communication Let&amp;rsquo;s get started.</description>
    </item>
    
  </channel>
</rss>
